/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approvedReturnedBook } from '../fn/book/approved-returned-book';
import { ApprovedReturnedBook$Params } from '../fn/book/approved-returned-book';
import { BookResponse } from '../models/book-response';
import { bookShareableStatus } from '../fn/book/book-shareable-status';
import { BookShareableStatus$Params } from '../fn/book/book-shareable-status';
import { borrowBook } from '../fn/book/borrow-book';
import { BorrowBook$Params } from '../fn/book/borrow-book';
import { createBook } from '../fn/book/create-book';
import { CreateBook$Params } from '../fn/book/create-book';
import { findAllBooksByOwner } from '../fn/book/find-all-books-by-owner';
import { FindAllBooksByOwner$Params } from '../fn/book/find-all-books-by-owner';
import { findAllBorrowedBooks } from '../fn/book/find-all-borrowed-books';
import { FindAllBorrowedBooks$Params } from '../fn/book/find-all-borrowed-books';
import { findAllDisplayableBooks } from '../fn/book/find-all-displayable-books';
import { FindAllDisplayableBooks$Params } from '../fn/book/find-all-displayable-books';
import { findAllReturnedBooks } from '../fn/book/find-all-returned-books';
import { FindAllReturnedBooks$Params } from '../fn/book/find-all-returned-books';
import { getBookById } from '../fn/book/get-book-by-id';
import { GetBookById$Params } from '../fn/book/get-book-by-id';
import { PageResponseBookResponse } from '../models/page-response-book-response';
import { PageResponseBorrowedBookResponse } from '../models/page-response-borrowed-book-response';
import { returnBorrowedBook } from '../fn/book/return-borrowed-book';
import { ReturnBorrowedBook$Params } from '../fn/book/return-borrowed-book';
import { updateBookArchiveStatus } from '../fn/book/update-book-archive-status';
import { UpdateBookArchiveStatus$Params } from '../fn/book/update-book-archive-status';
import { uploadBookCover } from '../fn/book/upload-book-cover';
import { UploadBookCover$Params } from '../fn/book/upload-book-cover';

@Injectable({ providedIn: 'root' })
export class BookService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createBook()` */
  static readonly CreateBookPath = '/books/save-book';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBook$Response(params: CreateBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    const obs = createBook(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBook(params: CreateBook$Params, context?: HttpContext): Observable<number> {
    const resp = this.createBook$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `borrowBook()` */
  static readonly BorrowBookPath = '/books/borrow/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBook$Response(params: BorrowBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    const obs = borrowBook(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBook(params: BorrowBook$Params, context?: HttpContext): Observable<number> {
    const resp = this.borrowBook$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadBookCover()` */
  static readonly UploadBookCoverPath = '/books/book-cover/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadBookCover()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadBookCover$Response(params: UploadBookCover$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    const obs = uploadBookCover(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadBookCover$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadBookCover(params: UploadBookCover$Params, context?: HttpContext): Observable<{
}> {
    const resp = this.uploadBookCover$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `bookShareableStatus()` */
  static readonly BookShareableStatusPath = '/books/shareable/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bookShareableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookShareableStatus$Response(params: BookShareableStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    const obs = bookShareableStatus(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bookShareableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bookShareableStatus(params: BookShareableStatus$Params, context?: HttpContext): Observable<number> {
    const resp = this.bookShareableStatus$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `returnBorrowedBook()` */
  static readonly ReturnBorrowedBookPath = '/books/return-book/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnBorrowedBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowedBook$Response(params: ReturnBorrowedBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    const obs = returnBorrowedBook(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnBorrowedBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowedBook(params: ReturnBorrowedBook$Params, context?: HttpContext): Observable<number> {
    const resp = this.returnBorrowedBook$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approvedReturnedBook()` */
  static readonly ApprovedReturnedBookPath = '/books/return-approve/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approvedReturnedBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  approvedReturnedBook$Response(params: ApprovedReturnedBook$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    const obs = approvedReturnedBook(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approvedReturnedBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approvedReturnedBook(params: ApprovedReturnedBook$Params, context?: HttpContext): Observable<number> {
    const resp = this.approvedReturnedBook$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateBookArchiveStatus()` */
  static readonly UpdateBookArchiveStatusPath = '/books/archived/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBookArchiveStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateBookArchiveStatus$Response(params: UpdateBookArchiveStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    const obs = updateBookArchiveStatus(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBookArchiveStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateBookArchiveStatus(params: UpdateBookArchiveStatus$Params, context?: HttpContext): Observable<number> {
    const resp = this.updateBookArchiveStatus$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findAllReturnedBooks()` */
  static readonly FindAllReturnedBooksPath = '/books/returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedBooks$Response(params?: FindAllReturnedBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    const obs = findAllReturnedBooks(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedBooks(params?: FindAllReturnedBooks$Params, context?: HttpContext): Observable<PageResponseBorrowedBookResponse> {
    const resp = this.findAllReturnedBooks$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `getBookById()` */
  static readonly GetBookByIdPath = '/books/get-book/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBookById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookById$Response(params: GetBookById$Params, context?: HttpContext): Observable<StrictHttpResponse<BookResponse>> {
    const obs = getBookById(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBookById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookById(params: GetBookById$Params, context?: HttpContext): Observable<BookResponse> {
    const resp = this.getBookById$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<BookResponse>): BookResponse => r.body)
    );
  }

  /** Path part for operation `findAllBooksByOwner()` */
  static readonly FindAllBooksByOwnerPath = '/books/by-owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBooksByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksByOwner$Response(params?: FindAllBooksByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBookResponse>> {
    const obs = findAllBooksByOwner(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBooksByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksByOwner(params?: FindAllBooksByOwner$Params, context?: HttpContext): Observable<PageResponseBookResponse> {
    const resp = this.findAllBooksByOwner$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PageResponseBookResponse>): PageResponseBookResponse => r.body)
    );
  }

  /** Path part for operation `findAllBorrowedBooks()` */
  static readonly FindAllBorrowedBooksPath = '/books/borrowed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBorrowedBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedBooks$Response(params?: FindAllBorrowedBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    const obs = findAllBorrowedBooks(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBorrowedBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedBooks(params?: FindAllBorrowedBooks$Params, context?: HttpContext): Observable<PageResponseBorrowedBookResponse> {
    const resp = this.findAllBorrowedBooks$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `findAllDisplayableBooks()` */
  static readonly FindAllDisplayableBooksPath = '/books/all-books';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllDisplayableBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllDisplayableBooks$Response(params?: FindAllDisplayableBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBookResponse>> {
    const obs = findAllDisplayableBooks(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllDisplayableBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllDisplayableBooks(params?: FindAllDisplayableBooks$Params, context?: HttpContext): Observable<PageResponseBookResponse> {
    const resp = this.findAllDisplayableBooks$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PageResponseBookResponse>): PageResponseBookResponse => r.body)
    );
  }

}
